#!/usr/bin/env python3

import os
import sys
import time
import shutil
import subprocess
import configparser

#Print help menu
def helpMenu(name):
	print ('Usage: %s <Tools> <Tools Base Directory> <Testing Program> -f <Benchmark File>' % name)
	print ('Usage: %s <Tools> <Tools Base Directory> <Testing Program> -d <Benchmark Directory>' % name)
	print ('Tools:\n\tspg:\tSPADE with Graphviz storage\n\tspn:\tSPADE with Neo4j storage\n\topu:\tOPUS\n\tcam:\tCamFlow')
	print ('Tools Base Directory: Base directory of the chosen tool (Type . to ignore)')
	print ('Benchmark File: Path to the benchmark file generated by ProvMark')
	print ('Benchmark Directory: Path to the directory containing mutliple benchmark files')

#Check Arguments
if len(sys.argv) != 6 or (sys.argv[4] != "-f" and sys.argv[4] != "-d"):
	helpMenu(sys.argv[0])
	quit()

baseDir = os.path.abspath('%s/../' % os.path.dirname(sys.argv[0]))
tool = sys.argv[1]
toolBaseDir = os.path.abspath(sys.argv[2])
testProg = os.path.abspath(sys.argv[3])
stageDir = os.path.dirname(testProg)
progName = os.path.basename(testProg)
workingDir = os.path.abspath('%s/working/' % baseDir)

if os.path.exists(workingDir):
	subprocess.call(['sudo','rm','-rf', workingDir])
os.makedirs(workingDir)
os.makedirs('%s/benchmark' % workingDir)
os.chown(workingDir, 1000, 1000)
os.chown('%s/benchmark' % workingDir, 1000, 1000)

if (sys.argv[4] == "-f"):
	file = os.path.abspath(sys.argv[5])
	shutil.copyfile(file, '%s/benchmark/%s' % (workingDir,os.path.basename(file)))
else:
	dir = os.path.abspath(sys.argv[5])
	for file in ('%s/%s' % (dir,name) for name in os.listdir(dir)):
		shutil.copyfile(file, '%s/benchmark/%s' % (workingDir,os.path.basename(file)))

#Parse Config File
config = configparser.ConfigParser()
config.read('%s/config/config.ini' % baseDir)

stage1Tool = config[tool]['stage1tool']
stage2Handler = config[tool]['stage2handler']
template = config[tool]['template']
threshold = config[tool]['threshold']

#Stage 1 - Start the tools and generate graph for the testing program (neo4j / dot / provjson)
start = time.time()
print ('Starting stage 1...Generating provenance for the testing program from native tools')

os.system('sudo chmod +x %s/startTool/%s' % (baseDir, stage1Tool.split()[0]))
stage1Command = 'sudo %s/startTool/%s %s %s %s %s %s' % (baseDir, stage1Tool, stageDir, workingDir, progName, toolBaseDir , 'testing')
fingerprint = subprocess.check_output(stage1Command.split())
shutil.copyfile('%s/%s/%s' % (workingDir,fingerprint,template % 'testing'), '%s/%s' % (workingDir,template % 'testing'))

print ('End of stage 1\n')
end = time.time()
t1 = end-start

#Stage 2 - Transform testing program provenance graph to Clingo graph
start = time.time()
print ('Starting stage 2...Transforming provenance result of the testing program to Clingo graph')

os.system('sudo chmod +x %s/genClingoGraph/%s' % (baseDir, stage2Handler.split()[0]))
stage2Command = 'sudo %s/genClingoGraph/%s %s %s %s' % (baseDir, stage2Handler, '%s', '%s', '%s')
subprocess.call((stage2Command % ('testing',template % 'testing',workingDir)).split())

print ('End of stage 2\n')
end = time.time()
t2 = end-start

#Stage 3 - Identify if any benchmark patterns exists in the testing program provenance
start = time.time()
print ('Starting stage 3...Identifying if any benchmark patterns exists in the testing provenace provenance

os.system('sudo chmod +x %s/processGraph/evaluateBenchmark.py' % baseDir)
stage3Command = 'sudo %s/processGraph/evaluateBenchmark.py %s %s %s' % (baseDir, workingDir, ('%s/processGraph/template.lp' % baseDir), threshold)

result = subprocess.check_output(stage3Command.split())

print ('End of stage 3\n')
end = time.time()
t3 = end-start

#Final Result
print ('Minimum Edit Distance between all benchmark patterns and the testing program provenance graph: %s' % result.split('/')[0])
print ('Threshold set: %d' % threshold)
print ('Conclusion: syscall action sequence represent by benchmark patterns does%s exist in the testing program' % result.split('/')[1])
