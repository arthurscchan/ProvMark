# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "jhcook/fedora27"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
   # Display the VirtualBox GUI when booting the machine
   vb.gui = true
   # Customize the amount of memory on the VM:
   vb.memory = 4096
   # Customize CPU cap
   vb.customize ["modifyvm", :id, "--cpuexecutioncap", "70"]
   # Customize number of CPU
   vb.cpus = 2
   # Customize VM name
   vb.name = "camflow-provmark"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo dnf -y install curl
		curl -s https://packagecloud.io/install/repositories/camflow/provenance/script.rpm.sh | sudo bash
		sudo dnf -y install camflow-0.7.4-1
    sudo dnf -y install camflow --allowerasing
		sudo systemctl enable camconfd.service
		sudo systemctl enable camflowd.service
		# boot by default to camflow
    sudo sed -i 's/saved/0/g' /etc/default/grub
    sudo grub2-mkconfig -o /boot/grub2/grub.cfg
    sudo dnf -y install ruby ruby-devel redhat-rpm-config graphviz
    gem install json rgl mqtt rake bundler

    # ProvMark specific
    sudo yum install glibc-static trace-cmd -y

    sudo rm -rf /tmp/.camflowModel
    git clone https://github.com/arthurscchan/ProvMark.git

    sudo dnf -y install automake cmake libcap-devel ncurses-devel bison flex boost-devel zlib-devel
    wget http://releases.llvm.org/3.4.2/clang+llvm-3.4.2-x86_64-fedora20.xz
    tar -xf clang+llvm-3.4.2-x86_64-fedora20.xz
    sudo cp -R clang+llvm-3.4.2-x86_64-fedora20/* /usr/local/
    sudo rm -rf clang+llvm-3.4.2-x86_64-fedora20
    sudo rm clang+llvm-3.4.2-x86_64-fedora20.xz

    git clone https://github.com/stp/minisat.git
    cd minisat
    mkdir build
    cd build
    cmake -DSTATIC_BINARIES=ON -DCMAKE_INSTALL_PREFIX=/usr/local/ ../
    sudo make install
    cd ../../

    git clone https://github.com/stp/stp.git
    cd stp
    git checkout tags/2.1.2
    mkdir build
    cd build
    cmake -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_PYTHON_INTERFACE:BOOL=OFF ..
    make
    sudo make install
    ulimit -s unlimited
    cd ../../

    rm -rf minisat stp

    git clone https://github.com/klee/klee-uclibc.git
    cd klee-uclibc
    sudo ln -s /usr/lib/gcc/x86_64-redhat-linux/7/crtbegin.o /lib64
    sudo ln -s /usr/lib/gcc/x86_64-redhat-linux/7/libgcc.a /lib64
    sudo ln -s /usr/lib/gcc/x86_64-redhat-linux/7/libgcc_s.so /lib64
    sudo ln -s /usr/lib/gcc/x86_64-redhat-linux/7/crtend.o /lib64
    ./configure --make-llvm-lib
    make
    cd ..

    git clone https://github.com/klee/klee.git
    mkdir klee_build_dir
    cd klee_build_dir
    CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" cmake -DENABLE_SOLVER_STP=ON -DENABLE_POSIX_RUNTIME=ON -DENABLE_KLEE_UCLIBC=ON -DKLEE_UCLIBC_PATH=/home/vagrant/klee-uclibc/ -DENABLE_SYSTEM_TESTS=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_TCMALLOC=OFF /home/vagrant/klee
    make

    rm -rf klee-uclibc
  SHELL
end
